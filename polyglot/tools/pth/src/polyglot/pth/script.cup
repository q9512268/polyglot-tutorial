package polyglot.pth;

import java.io.*;
import java.util.*;

action code {:
:}

parser code {:
    Lexer_c lexer;
    public Grm(String filename) {
        this(new File(filename));
    }
    public Grm(File file) {
        this();
        try {
            lexer = new Lexer_c(new FileReader(file));
        }
        catch (Exception e) {
            System.out.println("open script file (" + file.getName() +") error: " + e);
            lexer = new Lexer_c(new InputStreamReader(System.in));
        }
    }

    public Grm(Lexer_c l) {
        this();
        lexer = l;
    }
    
    public static int findErrorKind(String s) {
      s = s.toLowerCase();
      for (int i = 0; i < 10; i++) {
          String t = polyglot.util.ErrorInfo.getErrorString(i);
          if (t.toLowerCase().startsWith(s))
            return i;
      }
      return -1;      
    }
:}

scan with {:
    return lexer.next_token();
:}


terminal String IDENT;
terminal String STRING_LITERAL;
terminal LPAREN, RPAREN;
terminal LBRACK, RBRACK;
terminal LBRACE, RBRACE;
terminal SEMICOLON, COMMA;
terminal PLUS;

non terminal List<SourceFileTest> goal;
non terminal List<SourceFileTest> compilertest_list_opt;
non terminal List<SourceFileTest> compilertest_list;
non terminal List<SourceFileTest> compilertest;
non terminal String testpath_opt;
non terminal String command_line_args_opt;
non terminal List<SourceFileTest> filetest_list_opt;
non terminal List<SourceFileTest> filetest_list;
non terminal SourceFileTest filetest;
non terminal List<List<String>> compilation_unit_list;
non terminal List<String> filename_list;
non terminal String description_opt;
non terminal List<ExpectedFailure> failure_set_opt;
non terminal List<ExpectedFailure> failure_set;
non terminal String sentence;
non terminal ExpectedFailure failure;

start with goal;

goal ::=
        compilertest_list_opt:a
            {: RESULT = a; :}
    ;

compilertest_list_opt ::=
        {: RESULT = Collections.emptyList(); :}
    |   compilertest_list:a {: RESULT = a; :}
    ;

compilertest_list ::=
        compilertest:a
            {: 
               RESULT = a;
            :}
    |   compilertest:a compilertest_list:b
            {: b.addAll(0, a); RESULT = b; :}
    ;

compilertest ::=
        IDENT:a testpath_opt:b command_line_args_opt:c LBRACE filetest_list_opt:d RBRACE
            {: String extClassName = a;
               
		        for (SourceFileTest sft : d) {
		            sft.setTestDir(b);
		            sft.setExtensionClassname(extClassName);
		            sft.setExtraCmdLineArgs(c);
		        }
               RESULT = d; :}
	    
    ;

testpath_opt ::=
        LBRACK sentence:a RBRACK
            {: RESULT = a; :}
    | {: RESULT = null; :}
    ;

command_line_args_opt ::=
        sentence:a
            {: RESULT = a; :}
    | {: RESULT = null; :}
    ;

filetest_list_opt ::=
        {: RESULT = Collections.emptyList(); :}
    |   filetest_list:a {: RESULT = a; :}
    ;

filetest_list ::=
        filetest:a
            {: List<SourceFileTest> list = new LinkedList<>();
               list.add(a);
               RESULT = list;
            :}
    |   filetest:a SEMICOLON
            {: List<SourceFileTest> list = new LinkedList<>();
               list.add(a);
               RESULT = list;
            :}
    |   filetest:a SEMICOLON filetest_list:b
            {: b.add(0, a); RESULT = b; :}
    ;

filetest ::=
        compilation_unit_list:a description_opt:b failure_set_opt:d
            {: SourceFileTest sft = new SourceFileTest(a);
               sft.setDescription(b);
               sft.setExpectedFailures(d);
               RESULT = sft; :}
	    
    ;

compilation_unit_list ::=
		filename_list:a
			{: List<List<String>> list = new LinkedList<>();
			   list.add(a);
			   RESULT = list;
			:}
	|	compilation_unit_list:a COMMA filename_list:b
			{: a.add(b); RESULT = a; :}
	;

filename_list ::=
        IDENT:a
            {: List<String> list = new LinkedList<>();
               list.add(a);
               RESULT = list;
            :}
    |   filename_list:a IDENT:b
            {: a.add(b); RESULT = a; :}
    ;

description_opt ::=
            {: RESULT = null; :}
    |   sentence:a
            {: RESULT = a; :}
    ;

sentence ::=
    STRING_LITERAL:a
		{:
			RESULT = a;
		:}
    |   sentence:a PLUS STRING_LITERAL:b
        {:
            RESULT = a + b; 
        :}
    ;

failure_set_opt ::=
            {: List<ExpectedFailure> l = new ArrayList<>();
               RESULT = l;
            :}
    | failure_set:a
            {: RESULT = a; :}
    ;
    
failure_set ::=
        failure:a
            {: List<ExpectedFailure> l = new ArrayList<>();
               l.add(a);
               RESULT = l;
            :}
    |   failure_set:a  COMMA failure:b
            {: a.add(b); RESULT = a; :}
    ;

failure ::= 
         LPAREN IDENT:a RPAREN 
            {: 
              RESULT = new ExpectedFailure(Grm.findErrorKind(a));
             :}
    |    LPAREN RPAREN 
            {: 
              RESULT = new AnyExpectedFailure();
             :}
    |    LPAREN IDENT:a COMMA STRING_LITERAL:b RPAREN 
            {: 
              RESULT = new ExpectedFailure(Grm.findErrorKind(a), b);
             :}
    |    LPAREN STRING_LITERAL:b RPAREN 
            {: 
              RESULT = new ExpectedFailure(b);
             :}
    ;
